{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/lab-notes/lab-notes.component.ts","./src/app/lab-notes/lab-notes.component.html","./src/app/note.ts","./src/app/notes.service.ts","./src/app/search/search.component.ts","./src/app/search/search.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'labforward-task-ui';\n}\n","<div>\n  <mat-toolbar color=\"primary\">\n    <span>Labforward Code Challenge</span>\n  </mat-toolbar>\n  <mat-tab-group>\n    <mat-tab>\n      <ng-template mat-tab-label>\n        <mat-icon aria-hidden=\"false\" aria-label=\"Example home icon\">notes</mat-icon>\n        Lab Notes\n      </ng-template>\n      <app-lab-notes></app-lab-notes>\n    </mat-tab>\n    <mat-tab>\n      <ng-template mat-tab-label>\n        <mat-icon class=\"example-tab-icon\">search</mat-icon>\n        Search\n      </ng-template>\n      <app-search></app-search>\n    </mat-tab>\n  </mat-tab-group>\n</div>","import { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { SearchComponent } from './search/search.component';\nimport { FormsModule } from '@angular/forms';\nimport { LabNotesComponent } from './lab-notes/lab-notes.component';\nimport { MatListModule } from '@angular/material/list';\nimport { MatTableModule } from '@angular/material/table';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SearchComponent,\n    LabNotesComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FlexLayoutModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatTabsModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatCardModule,\n    MatInputModule,\n    MatChipsModule,\n    FormsModule,\n    MatListModule,\n    MatTableModule,\n    HttpClientModule\n  ],\n  providers: [HttpClient],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NotesService } from './../notes.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { Note } from '../note';\nimport { MatTable } from '@angular/material/table';\n\n@Component({\n  selector: 'app-lab-notes',\n  templateUrl: './lab-notes.component.html',\n  styleUrls: ['./lab-notes.component.css']\n})\nexport class LabNotesComponent implements OnInit {\n\n  constructor(private notesService: NotesService) { }\n\n  newNote: Note = new Note();\n  notes: Note[];\n  displayedColumns: string[] = ['time', 'data'];\n\n  @ViewChild(MatTable, { static: true }) table: MatTable<any>;\n\n  ngOnInit(): void {\n    this.notesService.getNotes().subscribe((response) => {\n      this.notes = response;\n    }, (error) => {\n      console.error('Failed to retrieve data to server.', error);\n    });\n  }\n\n  onSave() {\n    this.notesService.saveNotes(this.newNote).subscribe((response) => {\n      this.notes.push(response);\n      this.table.renderRows();\n      console.log(\"Saved successful.\", response);\n    }, (error) => {\n      console.error('Failed to save data to server.', error);\n    });\n  }\n}\n","<div fxLayout=\"column\" fxLayout.xs=\"column\" fxLayoutAlign=\"left\" fxLayoutGap=\"20px\" fxLayoutGap.xs=\"0\"\n    style=\"margin: 20px;\">\n\n    <div fxLayout=\"row\" fxLayout.xs=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"20px\" fxLayoutGap.xs=\"0\">\n        <mat-form-field style=\"width: 50%;\">\n            <input matInput placeholder=\"Enter a Note Here\" type=\"text\" [(ngModel)]=\"newNote.data\">\n        </mat-form-field>\n        <button button=\"submit\" mat-raised-button color=\"primary\" (click)=\"onSave()\">Add\n            Note</button>\n    </div>\n\n    <table mat-table [dataSource]=\"notes\" class=\"mat-elevation-z8\">\n\n        <ng-container matColumnDef=\"time\">\n            <th mat-header-cell *matHeaderCellDef> Time </th>\n            <td mat-cell *matCellDef=\"let note\"> {{note.time | date:'yyyy-MM-dd hh:mm:ss' }} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"data\">\n            <th mat-header-cell *matHeaderCellDef> Notes </th>\n            <td mat-cell *matCellDef=\"let note\"> {{note.data}} </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n</div>","export class Note {\n    id: string;\n    time: Date;\n    data: string;\n}\n","import { Note } from './note';\nimport { SearchResponse } from './search-response';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotesService {\n\n  REST_ENDPOINT: string = 'http://localhost:8080/api/v1/lab-notes';\n\n  constructor(private http: HttpClient) { }\n\n  getSearchResults(searchStr: string) {\n    return this.http.get<SearchResponse>(this.REST_ENDPOINT + '/search?q=' + searchStr);\n  }\n\n  getNotes() {\n    return this.http.get<Note[]>(this.REST_ENDPOINT);\n  }\n\n  saveNotes(notes: Note) {\n    return this.http.post<Note>(this.REST_ENDPOINT, notes);\n  }\n}\n","import { NotesService } from '../notes.service';\nimport { SearchResponse } from './../search-response';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css']\n})\nexport class SearchComponent implements OnInit {\n\n  searchResult: SearchResponse = {\n    occurrences: 0,\n    similarWords: []\n  };\n\n  searchStr: string;\n\n  resultsPanel: boolean =  false;\n\n  constructor(private notesService: NotesService) { }\n\n  ngOnInit(): void {\n  }\n\n  onSearch() {\n    this.notesService.getSearchResults(this.searchStr).subscribe((response) => {\n      if (response) {\n        this.searchResult = response;\n        this.resultsPanel = true;\n      } else {\n        console.log('No data for available.');\n      }\n    }, (error) => {\n      console.error('Failed to retrieve data from server.', error);\n    });\n  }\n}\n","<div fxLayout=\"column\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"20px\" fxLayoutGap.xs=\"0\"\n    style=\"margin: 20px;\">\n    <div fxLayout=\"row\" fxLayout.xs=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"20px\" fxLayoutGap.xs=\"0\">\n        <mat-form-field style=\"width: 50%;\">\n            <input matInput placeholder=\"Search Notes\" type=\"text\" [(ngModel)]=\"searchStr\">\n        </mat-form-field>\n        <button button=\"submit\" mat-raised-button color=\"primary\" (click)=\"onSearch()\">Search</button>\n    </div>\n    <label style=\"text-align: center\" *ngIf=\"resultsPanel\">Word Frequency: {{searchResult.occurrences}}</label>\n    <div fxLayout=\"row\" fxLayout.xs=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"20px\" fxLayoutGap.xs=\"0\"\n        *ngIf=\"resultsPanel\">\n        <label>Similar words</label>\n        <mat-chip-list aria-label=\"Similar words\">\n            <mat-chip *ngFor=\"let word of searchResult.similarWords\">{{word}}</mat-chip>\n        </mat-chip-list>\n    </div>\n</div>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}